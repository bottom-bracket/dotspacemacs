#+TITLE: DOOM Emacs Configuration
#+AUTHOR: C-v y p
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no
* Basics
**  Built In
   The adapted defaults from the ~config.el~ of a fresh installation.

 Name
 #+begin_src emacs-lisp
 ;; Some functionality uses this to identify you, e.g. GPG configuration, email
 ;; clients, file templates and snippets.
 (setq user-full-name "Philip Heringlake"
       user-mail-address "p.heringlake@mailbox.com")
 #+end_src

 Font
 #+BEGIN_SRC emacs-lisp
 ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
 ;; are the three important ones:
 ;;
 ;; + `doom-font'
 ;; + `dnction. This is the default:
(setq doom-theme 'doom-henna)
;; (setq doom-font (font-spec :family "Fira Code" :size 13 :weight 'normal))

(setq doom-font (font-spec :family "Fira Code" :size 14)
      doom-big-font (font-spec :family "Fira Code" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 16))
;; (custom-set-faces! '(variable-pitch :family "Minion Pro" :height 2.2))
;; (setq doom-variable-pitch-font (font-spec :family "Times New Roman" :weight 'normal))
 #+END_SRC

 Org-Dir
 #+BEGIN_SRC emacs-lisp
 ;; If you use `org' and don't want your org files in the default location below,
 ;; change `org-directory'. It must be set before org loads!
 (setq org-directory "~/Documents/org/")
 #+END_SRC

 Line-numbers
 #+BEGIN_SRC emacs-lisp
 ;; This determines the style of line numbers in effect. If set to `nil', line
 ;; numbers are disabled. For relative line numbers, set this to `relative'.
 ;;(setq display-line-numbers-type relative)
(setq display-line-number-width 4)
(setq display-line-numbers-type 'relative)

 #+END_SRC
**  More

#+BEGIN_SRC emacs-lisp
 (setq show-trailing-whitespace t
      delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files"
      window-combination-resize t
)
(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words

#+END_SRC
Kill Ring
#+BEGIN_SRC emacs-lisp
(use-package! popup-kill-ring)
#+END_SRC
Keep ~auto-fill-mode~ enabled in text modes.
~refill-mode~ seems useful too, but more for manual use as it also fills source blocks
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'auto-fill-mode)
;; (add-hook 'text-mode-hook #'refill-mode)
#+END_SRC

** Changing buffers
#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+END_SRC

** Start server
Start a server when I open emacs manually. This avoids weird behaviour when I
use the systemctl service. Or at least I'll notice crashes more easily.
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

* Eyecandy
#+BEGIN_SRC emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
(doom-themes-treemacs-config)
#+END_SRC
** Use theme magic to sync emacs theme with system
#+BEGIN_SRC emacs-lisp
(use-package! theme-magic)
#+END_SRC
Let's automatically update terminals on theme change
#+BEGIN_SRC emacs-lisp
(add-hook 'doom-load-theme-hook 'theme-magic-from-emacs)
#+END_SRC
* Evil everywhere
TODO test if this is necessary
#+BEGIN_SRC emacs-lisp
(use-package! evil-collection
;    :after
;    (setq evil-want-keybinding nil)
    :config
    (evil-collection-init)
  )

(use-package! evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
   ;; (load! "bindings/spacemacs.el")
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
(map! :map org-mode-map
     :localleader
     :desc "Reference" "l r" #'org-ref-helm-insert-ref-link
     :desc "Toggle Link display" "L" #'org-toggle-link-display
     :desc "Toggle LaTeX fragment" "X" #'org-latex-preview
     :desc "Copy Email html to clipboard" "M" #'export-org-email
     :desc "Screenshot" "S" #'org-screenshot-take
     ;; :desc "Toggle Sidebar Tree" "m" #'org-sidebar-tree-toggle
     :desc "Org-Ref" "R" #'org-ref
;     (:prefix "o"
;       :desc "Tags" "t" 'org-set-tags
;       (:prefix ("p" . "Properties")
;         :desc "Set" "s" 'org-set-property
;         :desc "Delete" "d" 'org-delete-property
;         :desc "Actions" "a" 'org-property-action
;         )
;       )
     (:prefix ("j" . "Jupyter")
       :desc "Open Scratch Buffer" "s" #'org-babel-jupyter-scratch-buffer
       :desc "Restart Kernel Execute Block" "r" #'jupyter-org-restart-kernel-execute-block)
     (:prefix ("H" . "Headings")
         :desc "Normal Heading" "h" #'org-insert-heading
         :desc "Todo Heading" "H" #'org-insert-todo-heading
         :desc "Normal Subheading" "s" #'org-insert-subheading
         :desc "Todo Subheading" "S" #'org-insert-todo-subheading)
     )
#+END_SRC
Set sidebar jump to ~S-RET~ since ~RET~ is not working (if I ever find out how, it
would be the better option to use)
#+BEGIN_SRC emacs-lisp
(map! :map org-sidebar-tree-map
      "S-<return>" #'org-sidebar-tree-jump
      "S-RET" #'org-sidebar-tree-jump)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package! helm-files
  :bind
  (:map helm-find-files-map
   ("C-h" . helm-find-files-up-one-level)
   ("C-l" . helm-execute-persistent-action))
)
#+END_SRC
** Spell check menu
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("y" . "Useful Hydra Menus")
        :desc "Spelling" "s" #'hydra-spelling/body))

#+END_SRC
** Get vimish fold toggle
#+BEGIN_SRC emacs-lisp
;; (map!
;;  (:prefix "z"
;;    :desc "evil/vimish-fold-toggle" "g" #'vimish-fold-toggle))

#+END_SRC
** Python REPL
#+BEGIN_SRC emacs-lisp
(map! :leader
     (:prefix "o"
       :desc "Ipython REPL" "i" #'+python/open-ipython-repl))
(map! :map python-mode-map
      :localleader
      (:prefix ("j" . "Jupyter Commands")
      :desc "Run new REPL" "r" #'jupyter-run-repl
      :desc "Associate Buffer to Jupyter REPL" "a" #'jupyter-repl-associate-buffer
      ))
#+END_SRC
bind blacken
#+BEGIN_SRC emacs-lisp
(map! (:after python
   (:map python-mode-map
     :localleader
     :desc "Blacken buffer" "b" #'blacken-buffer)))
#+END_SRC
** Disable page up/down
#+BEGIN_SRC emacs-lisp
;; in my setup it is prior and next that are define the Page Up/Down buttons
(map!
 "<prior>" nil
 "<next>" nil
 "<PageDown>" nil
 "<PageUp>" nil)
#+END_SRC
** Add the Ibuffer buffer list
No need to, its on ~SPC b i~
** Window
Raise popup buffer to ~spc-m-r~
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Raise Popup Buffer" "w m r" #'+popup/raise
      )

#+END_SRC
** Smartparens
Toggle smartparens mode on ~k~
#+BEGIN_SRC emacs-lisp
(map! :leader
     (:desc "Smartparens Mode" "t k" #'smartparens-mode))
#+END_SRC
Use tab to jump out of smartparens  <-  I am not convinced if this is desirable.
I'll try to get used to typing the closing part myself. If this does not work
out, I can come back to this.
#+BEGIN_SRC emacs-lisp
;; (map! :after smartparens-mode
;;       :ni "TAB" #'sp-up-sexp ;exit parentheses
;;       :ni "<tab>" #'sp-up-sexp ;exit parentheses
;;       )
#+END_SRC

** Open project agenda
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:desc "Agenda on Project .orgs" "o k" #'org-project-agenda))

#+END_SRC
** free TAB in helm
#+BEGIN_SRC emacs-lisp
;; (map! helm-map)
#+END_SRC
** Org noter
#+BEGIN_SRC emacs-lisp
(after! (pdf-tools org-noter)
  (map! :map pdf-view-mode-map
        :n "i" #'org-noter-insert-note))
(after! (org-noter)
  (map! :map pdf-view-mode-map
        :n "i" #'org-noter-insert-note
        :n "M-p" #'org-noter-create-skeleton)
  )

;; :localleader
     ;; (:prefix ("s" . "Sync"))
     ;; :desc "Sync current note" "sc" #'org-noter-sync-current-note
     ;; :desc "Sync next note" "sn" #'org-noter-sync-next-note
     ;; :desc "Sync previous note" "sN" #'org-noter-sync-prev-note
     ;; :desc "Sync current page/chapter" "sp" #'org-noter-sync-current-page-or-chapter
     ;; :desc "Insert note" "I" #'org-noter-insert-note
     ;; :desc "Insert precise note" "p" #'org-noter-insert-precise-note
     ;; :desc "Kill noter session" "q" #'org-noter-kill-session)
#+END_SRC

** ranger
Open ranger on ~SPC o _~  similar to dired
#+BEGIN_SRC emacs-lisp
(map! :leader
"o_" #'ranger)
#+END_SRC

** visual lines
Bind j and k to visual line navigation. This keeps ~dd/cc~  as it is.
#+BEGIN_SRC emacs-lisp
(map! :n "j" #'evil-next-visual-line)
(map! :n "k" #'evil-previous-visual-line)
#+END_SRC

* Functions
** Select heading in capture
#+BEGIN_SRC emacs-lisp
(defun org-get-target-headline (&optional targets prompt)
  "Prompt for a location in an org file and jump to it.

This is for promping for refile targets when doing captures.
Targets are selected from `org-refile-targets'. If TARGETS is
given it temporarily overrides `org-refile-targets'. PROMPT will
replace the default prompt message.

If CAPTURE-LOC is is given, capture to that location instead of
prompting."
  (let ((org-refile-targets (or targets org-refile-targets))
        (prompt (or prompt "Capture Location")))
    (if org-capture-overriding-marker
        (org-goto-marker-or-bmk org-capture-overriding-marker)
      (org-refile t nil nil prompt)))
  )

(defun org-ask-location ()
  (let* ((org-refile-targets '((nil :maxlevel . 9)))
         (hd (condition-case nil
                 (car (org-refile-get-location "Headline" nil t))
               (error (car org-refile-history)))))
    (goto-char (point-min))
    (outline-next-heading)
    (if (re-search-forward
         (format org-complex-heading-regexp-format (regexp-quote hd))
        nil t)
      (goto-char (point-at-bol))
      (goto-char (point-max))
      (or (bolp) (insert "\n"))
      (insert "* " hd "\n")))
    (end-of-line))
;; (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(after! org
  (setq org-refile-use-outline-path nil))                  ; Show full paths for refiling

#+END_SRC
** Insert Date
Perhaps remove this
#+BEGIN_SRC emacs-lisp
(defun insert-todays-date (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d-%m-%Y")
            (format-time-string "%Y-%m-%d"))))
(global-set-key (kbd "C-c d") 'insert-todays-date)
#+END_SRC
** Show which function in header
#+BEGIN_SRC emacs-lisp
;; Show the current function name in the header line
(which-function-mode)
(setq-default header-line-format
              '((which-function-mode ("" which-func-format " "))))
(setq mode-line-misc-info
            ;; We remove Which Function Mode from the mode line, because it's mostly
            ;; invisible here anyway.
            (assq-delete-all 'which-function-mode mode-line-misc-info))

#+END_SRC

** Org to HTML Email
Inspiration and realization taken from [[https://coredumped.dev/posts/outlook-email-in-org-mode/][Using org mode to write email for outlook · Core Dumped]]
#+BEGIN_SRC emacs-lisp

(defcustom org-html-image-base64-max-size #x40000
  "Export embedded base64 encoded images up to this size."
  :type 'number
  :group 'org-export-html)

(defun file-to-base64-string (file &optional image prefix postfix)
  "Transform binary file FILE into a base64-string prepending PREFIX and appending POSTFIX.
Puts \"data:image/%s;base64,\" with %s replaced by the image type before the actual image data if IMAGE is non-nil."
  (concat prefix
      (with-temp-buffer
        (set-buffer-multibyte nil)
        (insert-file-contents file nil nil nil t)
        (base64-encode-region (point-min) (point-max) 'no-line-break)
        (when image
          (goto-char (point-min))
          (insert (format "data:image/%s;base64," (image-type-from-file-name file))))
        (buffer-string))
      postfix))

(defun orgTZA-html-base64-encode-p (file)
  "Check whether FILE should be exported base64-encoded.
The return value is actually FILE with \"file://\" removed if it is a prefix of FILE."
  (when (and (stringp file)
             (string-match "\\`file://" file))
    (setq file (substring file (match-end 0))))
  (and
   (file-readable-p file)
   (let ((size (nth 7 (file-attributes file))))
     (<= size org-html-image-base64-max-size))
   file))

(defun orgTZA-html--format-image (source attributes info)
  "Return \"img\" tag with given SOURCE and ATTRIBUTES.
SOURCE is a string specifying the location of the image.
ATTRIBUTES is a plist, as returned by
`org-export-read-attribute'.  INFO is a plist used as
a communication channel."
  (if (string= "svg" (file-name-extension source))
      (org-html--svg-image source attributes info)
    (let* ((file (orgTZA-html-base64-encode-p source))
           (data (if file (file-to-base64-string file t)
                   source)))
      (org-html-close-tag
       "img"
       (org-html--make-attribute-string
        (org-combine-plists
         (list :src data
               :alt (if (string-match-p "^ltxpng/" source)
                        (org-html-encode-plain-text
                         (org-find-text-property-in-string 'org-latex-src source))
                      (file-name-nondirectory source)))
         attributes))
       info))))

(advice-add 'org-html--format-image :override #'orgTZA-html--format-image)

(defun export-org-email ()
  "Export the current org email and copy it to the clipboard"
  (interactive)
  (let ((org-export-show-temporary-export-buffer nil)
        (org-html-head (org-email-html-head)))
    (org-html-export-as-html)
    (with-current-buffer "*Org HTML Export*"
      (kill-new (buffer-string)))
    (message "HTML copied to clipboard")))

(defun org-email-html-head ()
  "Create the header with CSS for use with email"
  (concat
   "<style type=\"text/css\">\n"
   "<!--/*--><![CDATA[/*><!--*/\n"
   (with-temp-buffer
     (insert-file-contents
      "~/Documents/org/setupfiles/org-html-themes/styles/email/css/email.css")
     (buffer-string))
   "/*]]>*/-->\n"
   "</style>\n"))
#+END_SRC
** Spelling
add flyspell corrections to abbrev file and set that one abbref file is used for
all text modes
#+NAME:
#+BEGIN_SRC emacs-lisp
(after! (:and flyspell abbrev)
  (setq flyspell-abbrev-p t))
(use-package abbrev
  :init
  (setq-default abbrev-mode t)
  ;; a hook funtion that sets the abbrev-table to org-mode-abbrev-table
  ;; whenever the major mode is a text mode
  (defun my/set-text-mode-abbrev-table ()
    (if (derived-mode-p 'text-mode)
        (setq local-abbrev-table org-mode-abbrev-table)))
  :commands abbrev-mode
  :hook
  (abbrev-mode . my/set-text-mode-abbrev-table)
  :config
  ;; (setq abbrev-file-name (expand-file-name "abbrev.el" doom-private-dir))
  (setq abbrev-file-name "~/.dotfiles/abbrev_defs.el")
  (setq save-abbrevs 'silently))
#+END_SRC
A nice flyspell menu
#+BEGIN_SRC emacs-lisp
(defhydra hydra-spelling (:color blue)
  "
  ^
  ^Spelling^          ^Errors^            ^Checker^
  ^────────^──────────^──────^────────────^───────^───────
  _q_ quit            _p_ previous        _c_ correction
  ^^                  _n_ next            _d_ dictionary
  ^^                  _f_ check           _m_ mode
  ^^                  ^^                  ^^
  "
  ("q" nil)
  ("p" flyspell-correct-previous :color pink)
  ("n" flyspell-correct-next :color pink)
  ("c" ispell)
  ("d" ispell-change-dictionary)
  ("f" flyspell-buffer)
  ("m" flyspell-mode))
#+END_SRC
** Call Agenda with current Project's org files
Scan project folder for org files and call org Agenda on them.
#+BEGIN_SRC emacs-lisp
(defun org-project-agenda ()
  (interactive)
  (let ((org-agenda-files (doom-files-in (or (doom-project-root) default-directory) :match "\\.org$" :full t)))
    (call-interactively #'org-agenda)))
#+END_SRC
** Switch org-environment
I want to have phd and personal notes in two different Roam folders. Usually I
want to work with ~.dir-locals~ variables however this does not always work so I
need a function to activate one or the other.
#+BEGIN_SRC emacs-lisp
(defun my-phd-env-switch ()
(interactive)
  (setq org-roam-directory  "~/Documents/Research/zettel/")
  (setq org-id-extra-files (doom-files-in "~/Documents/Research" :match "\\.org$" :full t))
  (setq org-attach-id-dir  "~/Documents/Research/.org_attach/")
  (setq org-roam-encrypt-files nil))

(defun my-personal-env-switch ()
(interactive)
  (setq org-roam-directory  "~/Documents/org/zettel/")
  (setq org-id-extra-files nil)
  (setq org-attach-id-dir  "~/Documents/org/.org_attach/")
  (setq org-roam-encrypt-files t))
#+END_SRC
** regexp replace with RE-builder
Use this function to pop up the regexp-replace dialog with the regexp built in
RE-builder. Use the groups (defined by sth like  ~\([a-z]*=\)~ ) as variables ~\1~
(and so on) in the replace section. Taken from the internet (TODO add link)
#+BEGIN_SRC emacs-lisp
(defun reb-query-replace (to-string)
      "Replace current RE from point with `query-replace-regexp'."
      (interactive
       (progn (barf-if-buffer-read-only)
              (list (query-replace-read-to (reb-target-binding reb-regexp)
                                           "Query replace"  t))))
      (with-current-buffer reb-target-buffer
        (query-replace-regexp (reb-target-binding reb-regexp) to-string)))
#+END_SRC

* Completion
#+BEGIN_SRC emacs-lisp
;; (use-package! company-tabnine
;;   )

(after! (:any company)
(setq-default company-backends
                `((company-capf         ; `completion-at-point-functions'
                   ;; :separate company-tabnine
                   :separate company-yasnippet
                   :separate company-keywords
                   ;; :separate company-abbrev
                   :separate company-files)
                  company-ispell
                  company-dabbrev-code
                  company-files))

  ;; (add-to-list 'company-backends #'company-tabnine)
  ;; (add-to-list 'company-backends #'company-files)
  (set-company-backend! 'text-mode
      '(:separate company-capf
        :separate company-ispell
        ;; company-keywords       ; keywords
        :separate company-yasnippet
        ;; :separate company-dabbrev
        ;; :separate company-tabnine
        :separate company-files
     ; company-math-symbols-latex ; may  not need those as there is cdlatex mode
     ; company-latex-commands
     ))
  ;; (setq +lsp-company-backend '(company-capf))
  ;  :with company-files
  ;  company-tabnine
  ;  :separate
  ;; Trigger completion immediately.
(setq company-idle-delay 0.10)
  ;; reduce prefix length (for lsp)
(setq company-minimum-prefix-length 2)
  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (setq company-show-numbers t)
  (map! :map company-active-map
        "<tab>" nil
        "TAB" nil
        "C-SPC" 'company-complete-common-or-cycle))
  (use-package! company-math
    :after TeX-mode
    :config
    (set-company-backend! 'TeX-mode
      '(:separate company-capf
        :separate company-auctex
        :separate company-math-symbols-latex))
    (setq company-math-allow-latex-symbols-in-faces t))
(setq company-tooltip-align-annotations t)
(after! (:all org org-roam)
  (set-company-backend! 'org-mode
      '(:separate company-capf
        :separate company-org-roam
        :separate company-ispell
        ;;company-keywords       ; keywords
        :separate company-yasnippet
        :separate company-dabbrev
        ;; :separate company-tabnine
        :separate company-files
     ; company-math-symbols-latex ; may  not need those as there is cdlatex mode
     ; company-latex-commands
     )))
#+END_SRC

* Module Configuration
** evil
I want ~j/k~  to behave normally when navigating through a wrapped line. Usually
this is the ~#+CAPTION:~ text in org mode. Actually this needs to go to init.el
# #+BEGIN_SRC emacs-lisp
# (setq evil-respect-visual-line-mode t)
# #+END_SRC
Escape when ~j/k~ are pressed quickly after each other in insert mode. Do not care
for their order:
#+BEGIN_SRC emacs-lisp
(setq evil-escape-unordered-key-sequence t)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(after! helm
(setq helm-ff-auto-update-initial-value 1)
(setq helm-mode-fuzzy-match t)
(setq helm-completion-in-region-fuzzy-match t)
)
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
(after! latex
(add-to-list
  'TeX-command-list
  '("latexmk_shellesc"
    "latexmk %(-PDF)%S%(mode) -shell-escape %(file-line-error) %(extraopts) %t"
    TeX-run-latexmk
    nil                              ; ask for confirmation
    t                                ; active in all modes
    :help "Latexmk as for org"))

;; (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
)
(after! latex
  (add-hook 'LaTex-mode-hook 'turn-on-cdlatex))

(after! cdlatex
(map! :map cdlatex-mode-map
    :i "TAB" #'cdlatex-tab)
 (setq cdlatex-command-alist '(("ang"         "Insert \\ang{}"
                               "\\ang{?}" cdlatex-position-cursor nil t t)
                              ("si"          "Insert \\SI{}{}"
                               "\\SI{?}{}" cdlatex-position-cursor nil t t)
                              ("sl"          "Insert \\SIlist{}{}"
                               "\\SIlist{?}{}" cdlatex-position-cursor nil t t)
                              ("sr"          "Insert \\SIrange{}{}{}"
                               "\\SIrange{?}{}{}" cdlatex-position-cursor nil t t)
                              ("num"         "Insert \\num{}"
                               "\\num{?}" cdlatex-position-cursor nil t t)
                              ("nl"          "Insert \\numlist{}"
                               "\\numlist{?}" cdlatex-position-cursor nil t t)
                              ("nr"          "Insert \\numrange{}{}"
                               "\\numrange{?}{}" cdlatex-position-cursor nil t t)))
)
;; Latex viewers
;(after! latex
(setq +latex-viewers '(pdf-tools okular))
; )
 #+END_SRC
 Somehow the ~latex-viewers~ variable does not have any effect on the viewer used
 by latexmk so I need another solution

#+BEGIN_SRC emacs-lisp
;; Use pdf-tools to open PDF files
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+END_SRC

** eshell
Get rid of modeline in eshell buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook #'hide-mode-line-mode)
#+END_SRC
** term
Get rid of modeline in eshell buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook #'hide-mode-line-mode)
#+END_SRC
** org
*** Misc
Start in insert mode in =org-capture=
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
use helm-org-rifle
#+BEGIN_SRC emacs-lisp
(use-package! helm-org-rifle)
#+END_SRC

Set ~+org-vars~
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-archive-location (concat org-directory "archive/%s::")
      +org-capture-journal-file (concat org-directory "tagebuechlein.org.gpg")))
#+END_SRC
Log time when things get marked as done
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-log-done 'time))
#+END_SRC
Enable ~org-cdlatex-mode~
#+BEGIN_SRC emacs-lisp
(after! (:all org cdlatex)
(add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+END_SRC
On TAB: Expand heading, then subheading, then collapse all
#+BEGIN_SRC emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+END_SRC
org goto
#+BEGIN_SRC emacs-lisp
(setq org-goto-interface 'outline-path-completion
      org-goto-max-level 10)
#+END_SRC
image size
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width '(400))
#+END_SRC
org source popups in window at the right
#+BEGIN_SRC emacs-lisp
(after! org
  (set-popup-rule! "^\\*Org Src*" :side 'right :size 0.5))
#+END_SRC
prettify item bullets as well
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-superstar-prettify-item-bullets t))
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.6 :underline t)
  '(outline-2 :weight bold :height 1.5)
  '(outline-3 :weight bold :height 1.4)
  '(outline-4 :weight semi-bold :height 1.4)
  '(outline-5 :weight semi-bold :height 1.3)
  '(outline-6 :weight semi-bold :height 1.2)
  '(outline-7 :weight semi-bold :height 1.2)
  '(outline-8 :weight semi-bold :height 1.1)
  '(outline-9 :weight semi-bold :height 1.1)
  '(outline-10 :weight semi-bold :height 1.1))
#+END_SRC
*** Macros
Load macros from ~macros.el~
#+BEGIN_SRC emacs-lisp
(load "lisp/org-macros.el")
#+END_SRC
*** org pretty mode
enable variable pitch for text in org mode (not included in org-pretty)
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'mixed-pitch-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(add-hook! org-mode +org-pretty-mode)
#+END_SRC
*** Org FsTree

*** Preview Html
#+BEGIN_SRC emacs-lisp
(use-package! org-preview-html)
#+END_SRC
*** Org Export
Don't export table of contents
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-export-with-toc nil))
#+END_SRC
Ignore Headlines to avoid messy exports when exporting files that include other org files.
#+BEGIN_SRC emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+END_SRC
Tell Org where reveal.js shall be taken from:
#+BEGIN_SRC emacs-lisp
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+END_SRC
Other
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil
      org-use-speed-commands t
      org-catch-invisible-edits 'show)
#+END_SRC
**** TODO Nicer generated heading IDs
Thanks to alphapapa's [[https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors][unpackaged.el]]. Copied from tecasaur
I need to work out how to get the nice ids in latex export and not only in html.
#+BEGIN_SRC emacs-lisp
(defvar org-heading-contraction-max-words 3
  "Maximum number of words in a heading")
(defvar org-heading-contraction-max-length 35
  "Maximum length of resulting string")
(defvar org-heading-contraction-stripped-words
  '("the" "on" "in" "off" "a" "for" "by" "of" "and" "is" "to")
  "Unnecesary words to be removed from a heading")

(defun org-heading-contraction (heading-string)
  "Get a contracted form of HEADING-STRING that is onlu contains alphanumeric charachters.
Strips 'joining' words in `org-heading-contraction-stripped-words',
and then limits the result to the first `org-heading-contraction-max-words' words.
If the total length is > `org-heading-contraction-max-length' then individual words are
truncated to fit within the limit"
  (let ((heading-words
         (-filter (lambda (word)
                    (not (member word org-heading-contraction-stripped-words)))
                  (split-string
                   (->> heading-string
                        s-downcase
                        (replace-regexp-in-string "\\[\\[[^]]+\\]\\[\\([^]]+\\)\\]\\]" "\\1") ; get description from org-link
                        (replace-regexp-in-string "[-/ ]+" " ") ; replace seperator-type chars with space
                        (replace-regexp-in-string "[^a-z0-9 ]" "") ; strip chars which need %-encoding in a uri
                        ) " "))))
    (when (> (length heading-words)
             org-heading-contraction-max-words)
      (setq heading-words
            (subseq heading-words 0 org-heading-contraction-max-words)))

    (when (> (+ (-sum (mapcar #'length heading-words))
                (1- (length heading-words)))
             org-heading-contraction-max-length)
      ;; trucate each word to a max word length determined by
      ;;   max length = \floor{ \frac{total length - chars for seperators - \sum_{word \leq average length} length(word) }{num(words) > average length} }
      (setq heading-words (let* ((total-length-budget (- org-heading-contraction-max-length  ; how many non-separator chars we can use
                                                         (1- (length heading-words))))
                                 (word-length-budget (/ total-length-budget                  ; max length of each word to keep within budget
                                                        org-heading-contraction-max-words))
                                 (num-overlong (-count (lambda (word)                             ; how many words exceed that budget
                                                         (> (length word) word-length-budget))
                                                       heading-words))
                                 (total-short-length (-sum (mapcar (lambda (word)                 ; total length of words under that budget
                                                                     (if (<= (length word) word-length-budget)
                                                                         (length word) 0))
                                                                   heading-words)))
                                 (max-length (/ (- total-length-budget total-short-length)   ; max(max-length) that we can have to fit within the budget
                                                num-overlong)))
                            (mapcar (lambda (word)
                                      (if (<= (length word) max-length)
                                          word
                                        (substring word 0 max-length)))
                                    heading-words))))
    (string-join heading-words "-")))
#+END_SRC
Now here's alphapapa's subtley tweaked mode.
#+BEGIN_SRC emacs-lisp
(define-minor-mode unpackaged/org-export-html-with-useful-ids-mode
  "Attempt to export Org as HTML with useful link IDs.
Instead of random IDs like \"#orga1b2c3\", use heading titles,
made unique when necessary."
  :global t
  (if unpackaged/org-export-html-with-useful-ids-mode
      (advice-add #'org-export-get-reference :override #'unpackaged/org-export-get-reference)
    (advice-remove #'org-export-get-reference #'unpackaged/org-export-get-reference)))

(defun unpackaged/org-export-get-reference (datum info)
  "Like `org-export-get-reference', except uses heading titles instead of random numbers."
  (let ((cache (plist-get info :internal-references)))
    (or (car (rassq datum cache))
        (let* ((crossrefs (plist-get info :crossrefs))
               (cells (org-export-search-cells datum))
               ;; Preserve any pre-existing association between
               ;; a search cell and a reference, i.e., when some
               ;; previously published document referenced a location
               ;; within current file (see
               ;; `org-publish-resolve-external-link').
               ;;
               ;; However, there is no guarantee that search cells are
               ;; unique, e.g., there might be duplicate custom ID or
               ;; two headings with the same title in the file.
               ;;
               ;; As a consequence, before re-using any reference to
               ;; an element or object, we check that it doesn't refer
               ;; to a previous element or object.
               (new (or (cl-some
                         (lambda (cell)
                           (let ((stored (cdr (assoc cell crossrefs))))
                             (when stored
                               (let ((old (org-export-format-reference stored)))
                                 (and (not (assoc old cache)) stored)))))
                         cells)
                        (when (org-element-property :raw-value datum)
                          ;; Heading with a title
                          (unpackaged/org-export-new-title-reference datum cache))
                        ;; NOTE: This probably breaks some Org Export
                        ;; feature, but if it does what I need, fine.
                        (org-export-format-reference
                         (org-export-new-reference cache))))
               (reference-string new))
          ;; Cache contains both data already associated to
          ;; a reference and in-use internal references, so as to make
          ;; unique references.
          (dolist (cell cells) (push (cons cell new) cache))
          ;; Retain a direct association between reference string and
          ;; DATUM since (1) not every object or element can be given
          ;; a search cell (2) it permits quick lookup.
          (push (cons reference-string datum) cache)
          (plist-put info :internal-references cache)
          reference-string))))

(defun unpackaged/org-export-new-title-reference (datum cache)
  "Return new reference for DATUM that is unique in CACHE."
  (cl-macrolet ((inc-suffixf (place)
                             `(progn
                                (string-match (rx bos
                                                  (minimal-match (group (1+ anything)))
                                                  (optional "--" (group (1+ digit)))
                                                  eos)
                                              ,place)
                                ;; HACK: `s1' instead of a gensym.
                                (-let* (((s1 suffix) (list (match-string 1 ,place)
                                                           (match-string 2 ,place)))
                                        (suffix (if suffix
                                                    (string-to-number suffix)
                                                  0)))
                                  (setf ,place (format "%s--%s" s1 (cl-incf suffix)))))))
    (let* ((title (org-element-property :raw-value datum))
           ;; get ascii-only form of title without needing percent-encoding
           (ref (org-heading-contraction (substring-no-properties title)))
           (parent (org-element-property :parent datum)))
      (while (--any (equal ref (car it))
                    cache)
        ;; Title not unique: make it so.
        (if parent
            ;; Append ancestor title.
            (setf title (concat (org-element-property :raw-value parent)
                                "--" title)
                  ;; get ascii-only form of title without needing percent-encoding
                  ref (org-heading-contraction (substring-no-properties title))
                  parent (org-element-property :parent parent))
          ;; No more ancestors: add and increment a number.
          (inc-suffixf ref)))
      ref)))

(add-hook 'org-load-hook #'unpackaged/org-export-html-with-useful-ids-mode)
#+END_SRC
*** Org Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("w" "PhD work templates")
          ("wa"               ; key
           "Article"         ; name
           entry             ; type
           (file+headline "PhD.org.gpg" "Article")  ; target
           "* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template
           :prepend t        ; properties
           :empty-lines 1    ; properties
           :created t        ; properties
           )
          ("wf" "Link file in index" entry
           (file+function "~/Documents/Research/index.org" org-ask-location)
           "** %A \n:PROPERTIES:\n:Created: %U \n:FromDate: %^u \n:Linked: %f\n:END: \n %^g %?"
           :empty-lines 1
           )
          ("wt" "TODO template" entry
           (file+headline "PhD.org.gpg" "Capture")
           ( file "tpl_todo.txt" ) :empty-lines-before 1)
          ("wl" "Logbook entry" entry (file+datetree "phd_journal.org.gpg") "** %U - %^{Activity}  :LOG:")
          ("ww" "Link" entry (file+headline "PhD.org.gpg" "Links") "* %? %^L %^g \n%T" :prepend t)
          ("wn" "Note" entry (file+headline "PhD.org.gpg" "Notes")
           "* NOTE %?\n%U" :empty-lines 1)
          ("wN" "Note with Clipboard" entry (file+headline "PhD.org.gpg" "Notes")
           "* NOTE %?\n%U\n   %c" :empty-lines 1)
          ;; MEETING  (m) Meeting template
          ("wm" "MEETING   (m) Meeting" entry (file+headline "PhD.org.gpg" "Unsorted Meetings")
           "* %^{Meeting Title}
SCHEDULED: %^T
:PROPERTIES:
:Attend:   Philip Heringlake,
:Location:
:Agenda:
:Note:
:END:
:LOGBOOK:
- State \"MEETING\"    from \"\"           %U
:END:
 %?" :empty-lines 1)
          ("bd" "Note" entry (file+headline "~/Documents/PhD-cloudless/Doctoriales.org" "notes")
           "* NOTE %?\n%U" :empty-lines 1)
          ("bw" "Link" entry (file+headline "~/Documents/PhD-cloudless/Doctoriales.org" "Notes") "* %? %^L %^g \n%T" :prepend t)
          ("wa" "Appointment (sync)" entry (file  "gcal-work.org" ) "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("p" "Personal templates")
          ("pt" "TODO entry" entry
           (file+headline "personal.org.gpg" "Capture")
           ( file "tpl_todo.txt" ) :empty-lines-before 1)
          ("pl" "Logbook entry" entry (file+datetree "tagebuechlein.org.gpg") "** %U - %^{Activity}  :LOG:")
          ("pw" "Link" entry (file+headline "personal.org.gpg" "Links") "* %? %^L %^g \n%T" :prepend t)
          ("pn" "Note" entry (file+headline "personal.org.gpg" "Notes")
           "* NOTE %?\n%U" :empty-lines 1)
          ("pN" "Note with Clipboard" entry (file+headline "personal.org.gpg" "Notes")
           "* NOTE %?\n%U\n   %c" :empty-lines 1)
          ("pa" "Appointment (sync)" entry (file  "gcal.org" ) "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("c" "Cooking Templates")
          ("cw" "Recipe from web" entry (file+headline "Kochbuch.org" "Unkategorisiert") "%(org-chef-get-recipe-from-url)" :empty-lines 1)
          ("cm" "Manual Recipe" entry (file+headline "Kochbuch.org" "Unkategorisiert")
           "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
          ("d" "Drill")
          ("b" "Business")
          ("df" "French Vocabulary" entry
           (file+headline "drill/french.org" "Vocabulary")
           "* %^{The word} :drill:\n %t\n %^{Extended word (may be empty)} \n** Answer \n%^{The definition}"))
        ))
#+END_SRC
*** Org Agenda
**** Super Agenda
#+BEGIN_SRC emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
#+END_SRC
**** General
define agenda files for personal and professional use.
#+BEGIN_SRC emacs-lisp
(defvar my-org-agenda-files-personal '("~/Documents/org/PhD.org.gpg" "~/Documents/Research/index.org"  "~/Documents/org/personal.org.gpg" "~/Documents/org/gcal.org" ))
(defvar my-org-agenda-files-professional '("~/Documents/org/PhD.org.gpg" "~/Documents/Research/index.org" ))
;; (setq org-agenda-files (append my-org-agenda-files-personal (doom-files-in "~/Documents/Research" :match "\\.org$" :full t)))
(setq org-agenda-files my-org-agenda-files-personal)

;; (after! org
;;   (setq
;;         org-agenda-files my-org-agenda-files-personal
;;         ))
#+END_SRC
***** TODO Find way to change between personal and others
**** Custom Agenda views
again partly adapted from ~@tecosaur~
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))
        ("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t
                                :date today
                                :todo "TODAY"
                                :scheduled today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                                 :todo "NEXT"
                                 :order 1)
                          (:name "Important"
                                 :tag "Important"
                                 :priority "A"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 2)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :face error
                                 :order 7)
                          (:name "Research"
                                 :tag "Research"
                                 :order 10)
                          (:name "Issues"
                                 :tag "Issue"
                                 :order 12)
                          (:name "Emacs"
                                 :tag "Emacs"
                                 :order 13)
                          (:name "Projects"
                                 :tag "Project"
                                 :order 14)
                          (:name "To read"
                                 :tag "Read"
                                 :order 30)
                          (:name "Waiting"
                                 :todo "WAITING"
                                 :order 20)
                          (:name "Trivial"
                                 :priority<= "E"
                                 :tag ("Trivial" "Unimportant")
                                 :todo ("SOMEDAY" )
                                 :order 90)
                          (:discard (:tag ("Routine" "Daily")))))))))))
#+END_SRC
Some settings I copied from ~@tecosaur~
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)
#+END_SRC
*** Org Google Calender
#+BEGIN_SRC emacs-lisp
  (after! org-gcal
    (setq org-gcal-client-id "778561039072-m4jsg3lmr9eoihk79uouuucf9tug9agp.apps.googleusercontent.com"
          org-gcal-client-secret "UjB-Q-S09K2uZjHcoRIyPvNd"
          org-gcal-file-alist '(("naehmlich@gmail.com" .  "~/Documents/org/gcal.org")
                                ("rhcgeikr7l3umo3vk69rbn9nos@group.calendar.google.com" . "~/Documents/org/gcal-work.org")))
                                )
#+END_SRC
*** Org Logging
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
  (setq org-log-redeadline (quote note))
  (setq org-log-reschedule (quote note))
  (setq org-log-repeat (quote note))
#+END_SRC
*** Org download
Avoid cryptic attach style directories:
#+BEGIN_SRC emacs-lisp
(after! org-download
  (setq org-download-image-dir "./img/"
        org-download-heading-lvl 0
        org-download-method 'directory))
#+END_SRC
*** Org Brain
#+BEGIN_SRC emacs-lisp
  (setq org-brain-path "~/Documents/org/brain")
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil)
#+END_SRC
*** Org Roam
#+BEGIN_SRC emacs-lisp
(after! org-roam
  (setq org-roam-directory "~/Documents/org/zettel/")
  (setq org-roam-encrypt-files t)
  (setq org-roam-link-title-format "R:%s")
  )
(setq org-roam-capture-templates
      '(("d" "default" plain (function org-roam-capture--get-point)
         "- tags :: %?\n- source :: \n"
         :file-name "${slug}-%<%Y%m%d%H%M%S>"
         :head "#+TITLE: ${title}\n"
         :unnarrowed t)))
(setq org-roam-capture-ref-templates
      '(("r" "ref" plain #'org-roam-capture--get-point
         "- tags :: ${tags}\n\n %?"
         :file-name "${slug}-%<%Y%m%d%H%M%S>"
         :head
         "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n"
         :unnarrowed t)))
#+END_SRC
Org roam server:
#+BEGIN_SRC emacs-lisp
(use-package! org-roam-server)
#+END_SRC
*** Org Babel
**** Misc
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python"))
;; (add-hook! org-mode
;;            #'(lambda ()
;;                (push '("#+begin_src" . "λ") prettify-symbols-alist)
;;                (push '("#+end_src" . "λ") prettify-symbols-alist)
;;                (push '("#+begin_example" . "⁈") prettify-symbols-alist)
;;                (push '("#+end_example" . "⁈") prettify-symbols-alist)
;;                (push '("#+begin_quote" . "“") prettify-symbols-alist)
;;                (push '("#+end_quote" . "”") prettify-symbols-alist)
;;                (push '("#+begin_export" . "->") prettify-symbols-alist)
;;                (push '("#+end_export" . "<-") prettify-symbols-alist)
;;                (push '("jupyter-python" . "") prettify-symbols-alist)
;;                (push '("#+RESULTS:" . "=") prettify-symbols-alist)
;;                (push '(":results" . "=") prettify-symbols-alist)
;;                (push '(":dir" . "") prettify-symbols-alist)
;;                (push '(":session" . "@") prettify-symbols-alist)
;;                (setq line-spacing 4)
;;                (prettify-symbols-mode)))
#+END_SRC
****    Async
#+BEGIN_SRC emacs-lisp
  (require 'ob-async)
#+END_SRC

**** TODO Wolfram
It would be cool to try this :)
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-src-lang-modes '("mathematica" . wolfram))
#+END_SRC
****    Jupyter and Julia
Enable interaction mode in org mode
#+BEGIN_SRC emacs-lisp
 ;; (add-hook! org-mode
 ;;   (jupyter-org-interaction-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/programs/julia")
  (add-to-list 'exec-path "~/programs/julia")
  (add-hook 'julia-mode-hook 'julia-repl-mode)
  (setq inferior-julia-program-name "/home/philip/programs/julia/julia")
  (add-hook 'ob-async-pre-execute-src-block-hook
            '(lambda ()
               (setq inferior-julia-program-name "/home/philip/programs/julia/julia")))
  (setq ob-async-no-async-languages-alist '( "jupyter-python" "jupyter-julia" "julia" "python"))
  (setq jupyter-pop-up-frame nil)
  (setq jupyter-eval-use-overlays t)
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:kernel . "python3")))
#+END_SRC
Hopefully fixes crashes in repl:
#+BEGIN_SRC emacs-lisp
(defun jupyter-repl-font-lock-override (_ignore beg end &optional verbose)
  `(jit-lock-bounds ,beg . ,end))

(advice-add #'jupyter-repl-font-lock-fontify-region :override #'jupyter-repl-font-lock-override)
#+END_SRC

****    Run codeblocks without confirmation:
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
#+END_SRC
****    Default Header
#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args '((:eval . "never-export")
                                        (:results . "replace")
                                        ))
#+END_SRC
**** ingest scripts
#+BEGIN_SRC emacs-lisp
(org-babel-lob-ingest "~/Documents/org/scripts.org")
#+END_SRC
**** LSP in source blocks
#+BEGIN_SRC emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (setq centaur-lsp 'lsp-mode)
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
              (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("python" "ipython" "bash" "sh"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
#+END_SRC
*** Ox Latex
****  Export classes
#+BEGIN_SRC emacs-lisp
(after! ox (require 'ox-koma-letter))
#+END_SRC
     Koma Article Class
 #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-classes
                  '("koma-article" "\\documentclass{scrartcl}"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
 #+END_SRC

     Mimosis Class
 #+BEGIN_SRC emacs-lisp
  ;; Mimore class is a latex class for writing articles.
  (add-to-list 'org-latex-classes
               '("mimore"
                 "\\documentclass{mimore}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Mimosis is a class I used to write my Ph.D. thesis.
  (add-to-list 'org-latex-classes
               '("mimosis"
                 "\\documentclass{mimosis}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]
\\newcommand{\\mboxparagraph}[1]{\\paragraph{#1}\\mbox{}\\\\}
\\newcommand{\\mboxsubparagraph}[1]{\\subparagraph{#1}\\mbox{}\\\\}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
                 ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))

  ;; Elsarticle is Elsevier class for publications.
  (add-to-list 'org-latex-classes
               '("elsarticle"
                 "\\documentclass{elsarticle}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
 #+END_SRC
**** Config
:PROPERTIES:
:ID:       002747a6-3cb6-42c7-ae98-bac74face525
:END:
Set Latex logfile extensions to be removed after org export
 #+BEGIN_SRC emacs-lisp
   (setq org-latex-logfiles-extensions (quote ("lof" "lot" "bcf" "run.xml" "xdv" "synctex.gz" "aux" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle")))
 #+END_SRC
 Disable ~grffile~ in the default packages since it breaks image export in XeLaTeX
#+BEGIN_SRC emacs-lisp
(setq org-latex-default-packages-alist
  '(("AUTO" "inputenc"  t ("pdflatex"))
    ("T1"   "fontenc"   t ("pdflatex"))
    (""     "graphicx"  t)
    ;; (""     "grffile"   t) ; still in standard org packages but it became useless with new texlive
    (""     "longtable" nil)
    (""     "wrapfig"   nil)
    (""     "rotating"  nil)
    ("normalem" "ulem"  t)
    (""     "amsmath"   t)
    (""     "textcomp"  t)
    (""     "amssymb"   t)
    (""     "capt-of"   nil)
    (""     "hyperref"  nil)))

#+END_SRC

 Standard Packages
#+BEGIN_SRC emacs-lisp
(setq org-latex-packages-alist '(
                                 ("" "minted" t)
                                 ("" "xcolor" t)
                                 ("binary-units=true" "siunitx" t)
                                 ("" "nicefrac" t)))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
  '(("bgcolor" "lightgray")
    ("linenos" "true")
    ("style" "tango")
    ("frame" "lines")
    ("fontsize" "\\scriptsize")
    ("linenos" "")
    ("breakanywhere" "true")
    ("breakautoindent" "true")
    ("breaklines" "true")
    ("autogobble" "true")
    ("obeytabs" "true")
    ("python3" "true")
    ("breakbefore" "\\\\\\.+")
    ("breakafter" "\\,")
    ("breaksymbol" "\\tiny\\ensuremath{\\hookrightarrow}")
    ("breakanywheresymbolpre" "\\,\\footnotesize\\ensuremath{{}_{\\rfloor}}")
    ("breakbeforesymbolpre" "\\,\\footnotesize\\ensuremath{{}_{\\rfloor}}")
    ("breakaftersymbolpre" "\\,\\footnotesize\\ensuremath{{}_{\\rfloor}}")
    ))
 #+END_SRC
Compiler
#+BEGIN_SRC emacs-lisp
;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
(setq org-latex-pdf-process (list "latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -bibtex -f -pdf -output-directory=%o %f"))
#+END_SRC
Verbatim is not Code

Since have just gone to so much effort above let's make the most of it by making
=verbatim= use ~verb~ instead of ~protectedtexttt~ (default).
#+BEGIN_SRC emacs-lisp
(setq org-latex-text-markup-alist '((bold . "\\textbf{%s}")
           (code . protectedtexttt)
           (italic . "\\emph{%s}")
           (strike-through . "\\sout{%s}")
           (underline . "\\uline{%s}")
           (verbatim . verb)))
#+END_SRC
Labels
#+BEGIN_SRC emacs-lisp
  (setq org-latex-prefer-user-labels t)
#+END_SRC

**** Exporting to Beamer
It's nice to use a different theme
#+BEGIN_SRC emacs-lisp
(setq org-beamer-theme "[progressbar=foot]metropolis")
#+END_SRC
Then customise it a bit
#+BEGIN_SRC emacs-lisp

#+END_SRC
And I think that it's natural to divide a presentation into sections, e.g.
Introduction, Overview... so let's set bump up the headline level that becomes a
frame from ~1~ to ~2~.
#+BEGIN_SRC emacs-lisp
(setq org-beamer-frame-level 2)
#+END_SRC
*** Ox Pandoc
#+BEGIN_SRC emacs-lisp
(use-package! ox-pandoc)
#+END_SRC
*** Org ref
#+BEGIN_SRC emacs-lisp
(use-package! org-ref
    :after org
    :init
    ; code to run before loading org-ref
    :config
    ; code to run after loading org-ref
  ;; bibtex
  ;; somehow does not work
  ;;  ;; adjust note style
  ;; (defun my/org-ref-notes-function (candidates)
  ;;   (let ((key (helm-marked-candidates)))
  ;;     (funcall org-ref-notes-function (car key))))
  ;; '(helm-delete-action-from-source "Edit notes" helm-source-bibtex)
  ;; '(helm-add-action-to-source "Edit notes (org-ref)" 'my/org-ref-notes-function helm-source-bibtex 10)

  ;; does not work either
  ;; Tell org-ref to let helm-bibtex find notes for it
  (setq org-ref-notes-function
        (lambda (thekey)
	        (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
	          (bibtex-completion-edit-notes
	           (list (car (org-ref-get-bibtex-key-and-file thekey)))))))

  (setq org-ref-default-bibliography '("~/Documents/PhD/Literaturebib/library_zotero.bib")
        ;; org-ref-pdf-directory "~/Documents/PhD/Literature/pdfs/"
        ;; org-ref-bibliography-notes "~/Documents/PhD/Literaturebib/notes.org"
        org-ref-notes-directory "~/Documents/Research/zettel/biblio/"
        reftex-default-bibliography '("~/Documents/PhD/Literaturebib/library_zotero.bib")
        bibtex-completion-notes-path "~/Documents/Research/zettel/biblio/"
        bibtex-completion-bibliography "~/Documents/PhD/Literaturebib/library_zotero.bib"
        ;; bibtex-completion-library-path "~/Documents/PhD/Literature/pdfs"
        bibtex-completion-library-path "~/Zotero/storage/"
        org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
        )
  (setq bibtex-completion-pdf-field "file") ;; if non nil looks for pdf file field in bibtex entry and openes that pdf
  ;; (setq bibtex-completion-find-additional-pdfs t)
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  (setq org-ref-show-broken-links t)

  ;; (defun org-ref-open-pdf-at-point-in-emacs ()
  ;;   "Open the pdf for bibtex key under point if it exists."
  ;;   (interactive)
  ;;   (let* ((results (org-ref-get-bibtex-key-and-file))
  ;;          (key (car results))
  ;;          (pdf-file (funcall org-ref-get-pdf-filename-function key)))
  ;;     (if (file-exists-p pdf-file)
  ;;         (find-file-other-window pdf-file)
  ;;       (message "no pdf found for %s" key))))

;; for use with zotero
    (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
            (key (car results))
        (pdf-file (car (bibtex-completion-find-pdf key))))
        (if (file-exists-p pdf-file)
        (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

    (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)


  (defun org-ref-open-in-scihub ()
    "Open the bibtex entry at point in a browser using the url field or doi field.
Not for real use, just here for demonstration purposes."
    (interactive)
    (let ((doi (org-ref-get-doi-at-point)))
      (when doi
        (if (string-match "^http" doi)
            (browse-url doi)
          (browse-url (format "http://sci-hub.se/%s" doi)))
        (message "No url or doi found"))))

  ;; (helm-add-action-to-source "Grep PDF" 'org-ref-grep-pdf helm-source-bibtex 1)

;; https://write.as/dani/notes-on-org-noter provides a solution to open org
;; noter on a cite link

(defun org-ref-noter-at-point () "Open the pdf for bibtex key under point if it
      exists." (interactive) (let* ((results (org-ref-get-bibtex-key-and-file))
      (key (car results)) (pdf-file (funcall org-ref-get-pdf-filename-function
      key))) (if (file-exists-p pdf-file) (progn (find-file-other-window
      pdf-file) (org-noter)) (message "no pdf found for %s" key))))


(add-to-list 'org-ref-helm-user-candidates '("Org-Noter notes" . org-ref-noter-at-point))
(add-to-list 'org-ref-helm-user-candidates '("Open in Sci-hub" . org-ref-open-in-scihub))
(add-to-list 'org-ref-helm-user-candidates '("Open in Emacs" . org-ref-open-pdf-at-point-in-emacs)))
#+END_SRC
*** Clever Ids
When storing a link we want to use a link to the headlines ID.
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+END_SRC

*** Org noter
#+BEGIN_SRC emacs-lisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
   (defun my/org-custom-id-get (&optional pom create prefix)
     "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
     (interactive)
     (org-with-point-at pom
       (let ((id (org-entry-get nil "CUSTOM_ID")))
         (cond
          ((and id (stringp id) (string-match "\\S-" id))
           id)
          (create
           (setq id (org-id-new (concat prefix "h")))
           (org-entry-put pom "CUSTOM_ID" id)
           (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
           id)))))
   (defun make-noter-from-custom-id (&optional pom create prefix)
     "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
     (interactive)
       (let ((id (org-entry-get (point) "Custom_ID" )))
         (setq pdfpath (concat "../Literature/pdfs/"  id ".pdf"))
           (org-entry-put (point) "NOTER_DOCUMENT" pdfpath)
           ))
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'horizontal-split
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   org-noter-notes-search-path '("~/Documents/Research/zettel/biblio")
   )
  )
#+END_SRC
*** Org Sidebar
#+BEGIN_SRC emacs-lisp
(use-package! org-sidebar
  :config
  (setq org-sidebar-tree-jump-fn #'org-sidebar-tree-jump-source))
#+END_SRC
*** Org Mime
#+BEGIN_SRC emacs-lisp
(use-package! org-mime)
#+END_SRC
*** Org Journal
Activated in doom init.
#+BEGIN_SRC emacs-lisp
(after! org-journal
   (setq org-journal-file-type 'daily)
   (setq org-journal-date-prefix "#+DATE:")
   (setq org-journal-date-format "%A, %d %B %Y")
   (setq org-journal-file-format "%Y-%m-%d.org")
   (setq org-journal-dir org-roam-directory)
   (setq org-journal-enable-encryption nil)
   (setq org-journal-enable-agenda-integration t)
)
#+END_SRC
*** Deft
#+BEGIN_SRC emacs-lisp
(after! deft
  (setq deft-recursive t
        deft-use-filter-string-for-filename t
        deft-default-extension "org"
        deft-extensions '("org" "txt" "tex" "md" "markdown" "gpg")
        deft-directory org-roam-directory))
#+END_SRC

*** Eyecandy

It's also nice to make use of the Unicode characters for check boxes, and other commands.
#+BEGIN_SRC emacs-lisp
(after! org
  (appendq! +pretty-code-symbols
            '(:checkbox     "☐"
              :pending      "◼"
              :checkedbox   "☑"
              :results      "🠶"
              :property     "☸"
              :properties   "⚙"
              :logbook      "📘"
              :end          "∎"
              :options      "⌥"
              :title        "𝙏"
              :email        "⟰"
              :author       "𝘼"
              :date         "𝘿"
              :latex_header "⇥"
              :begin_quote  "❮"
              :end_quote    "❯"
              :begin_export "⯮"
              :end_export "⯬"
              :em_dash      "—"))
  (set-pretty-symbols! 'org-mode
    :merge t
    :checkbox     "[ ]"
    :pending      "[-]"
    :checkedbox   "[X]"
    :results      "#+RESULTS:"
    :property     "#+PROPERTY:"
    :property     ":PROPERTIES:"
    :logbook      ":LOGBOOK:"
    :end          ":END:"
    :options      "#+OPTIONS:"
    :title        "#+TITLE:"
    :email        "#+EMAIL:"
    :author       "#+AUTHOR:"
    :date         "#+DATE:"
    :latex_header "#+LATEX_HEADER:"
    :begin_quote  "#+BEGIN_QUOTE"
    :end_quote    "#+END_QUOTE"
    :begin_export "#+BEGIN_EXPORT"
    :end_export   "#+END_EXPORT"
    :em_dash      "---")
)
(plist-put +pretty-code-symbols :name "⁍") ; or › could be good?
#+END_SRC
We also like ~org-fragtog~, and that wants a hook.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+END_SRC
**** LaTeX Fragments
     Formula Preview
 #+BEGIN_SRC emacs-lisp
   (setq org-preview-latex-default-process 'dvipng)
 #+END_SRC
It's nice to customise the look of LaTeX fragments so they fit better in the
text --- like this \(\sqrt{\beta^2+3}-\sum_{\phi=1}^\infty \frac{x^\phi-1}{\Gamma(ab)}\). Let's start by adding a sans font.
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-header "\\documentclass[8pt]{article}
\\usepackage[usenames]{color}

\\usepackage[T1]{fontenc}
\\usepackage{mathtools}
\\usepackage{textcomp,amssymb}
\\usepackage[makeroom]{cancel}

\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
% my custom stuff
\\usepackage{arev}
\\usepackage{arevmath}")
#+END_SRC
Make sure colors change if theme changes.
#+BEGIN_SRC emacs-lisp
;; (after! org
;; make background of fragments transparent
  (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
    (plist-put dvipng--plist :use-xcolor t)
    (plist-put dvipng--plist :image-converter '("dvipng -D %D -bg 'transparent' -T tight -o %O %f")))
;;   (add-hook! 'doom-load-theme-hook
;;     (defun +org-refresh-latex-background ()
;;       (plist-put! org-format-latex-options
;;                   :background
;;                   (face-attribute (or (cadr (assq 'default face-remapping-alist))
;;                                       'default)
;;                                   :background nil t))))
;; )
#+END_SRC

***** Stolen from [[https://github.com/jkitchin/scimax][scimax]] (semi-working right now)
I want fragment justification
#+BEGIN_SRC emacs-lisp
(after! org
  (defun scimax-org-latex-fragment-justify (justification)
    "Justify the latex fragment at point with JUSTIFICATION.
JUSTIFICATION is a symbol for 'left, 'center or 'right."
    (interactive
     (list (intern-soft
            (completing-read "Justification (left): " '(left center right)
                             nil t nil nil 'left))))
    (let* ((ov (ov-at))
           (beg (ov-beg ov))
           (end (ov-end ov))
           (shift (- beg (line-beginning-position)))
           (img (overlay-get ov 'display))
           (img (and (and img (consp img) (eq (car img) 'image)
                          (image-type-available-p (plist-get (cdr img) :type)))
                     img))
           space-left offset)
      (when (and img
                 ;; This means the equation is at the start of the line
                 (= beg (line-beginning-position))
                 (or
                  (string= "" (s-trim (buffer-substring end (line-end-position))))
                  (eq 'latex-environment (car (org-element-context)))))
        (setq space-left (- (window-max-chars-per-line) (car (image-size img)))
              offset (floor (cond
                             ((eq justification 'center)
                              (- (/ space-left 2) shift))
                             ((eq justification 'right)
                              (- space-left shift))
                             (t
                              0))))
        (when (>= offset 0)
          (overlay-put ov 'before-string (make-string offset ?\ ))))))

  (defun scimax-org-latex-fragment-justify-advice (beg end image imagetype)
    "After advice function to justify fragments."
    (scimax-org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))


  (defun scimax-toggle-latex-fragment-justification ()
    "Toggle if LaTeX fragment justification options can be used."
    (interactive)
    (if (not (get 'scimax-org-latex-fragment-justify-advice 'enabled))
        (progn
          (advice-add 'org--format-latex-make-overlay :after 'scimax-org-latex-fragment-justify-advice)
          (put 'scimax-org-latex-fragment-justify-advice 'enabled t)
          (message "Latex fragment justification enabled"))
      (advice-remove 'org--format-latex-make-overlay 'scimax-org-latex-fragment-justify-advice)
      (put 'scimax-org-latex-fragment-justify-advice 'enabled nil)
      (message "Latex fragment justification disabled"))))
#+END_SRC
There's also this lovely equation numbering stuff I'll nick
#+BEGIN_SRC emacs-lisp
;; Numbered equations all have (1) as the number for fragments with vanilla
;; org-mode. This code injects the correct numbers into the previews so they
;; look good.
(after! org
  (defun scimax-org-renumber-environment (orig-func &rest args)
    "A function to inject numbers in LaTeX fragment previews."
    (let ((results '())
          (counter -1)
          (numberp))
      (setq results (loop for (begin .  env) in
                          (org-element-map (org-element-parse-buffer) 'latex-environment
                            (lambda (env)
                              (cons
                               (org-element-property :begin env)
                               (org-element-property :value env))))
                          collect
                          (cond
                           ((and (string-match "\\\\begin{equation}" env)
                                 (not (string-match "\\\\tag{" env)))
                            (incf counter)
                            (cons begin counter))
                           ((string-match "\\\\begin{align}" env)
                            (prog2
                                (incf counter)
                                (cons begin counter)
                              (with-temp-buffer
                                (insert env)
                                (goto-char (point-min))
                                ;; \\ is used for a new line. Each one leads to a number
                                (incf counter (count-matches "\\\\$"))
                                ;; unless there are nonumbers.
                                (goto-char (point-min))
                                (decf counter (count-matches "\\nonumber")))))
                           (t
                            (cons begin nil)))))

      (when (setq numberp (cdr (assoc (point) results)))
        (setf (car args)
              (concat
               (format "\\setcounter{equation}{%s}\n" numberp)
               (car args)))))

    (apply orig-func args))


  (defun scimax-toggle-latex-equation-numbering ()
    "Toggle whether LaTeX fragments are numbered."
    (interactive)
    (if (not (get 'scimax-org-renumber-environment 'enabled))
        (progn
          (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
          (put 'scimax-org-renumber-environment 'enabled t)
          (message "Latex numbering enabled"))
      (advice-remove 'org-create-formula-image #'scimax-org-renumber-environment)
      (put 'scimax-org-renumber-environment 'enabled nil)
      (message "Latex numbering disabled.")))

  (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
  (put 'scimax-org-renumber-environment 'enabled t))
#+END_SRC
*** Opening files
I added this because pdfs opened with bibref would open in okular.
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\(::[0-9]+\\)?\\'" . emacs)
        ("\\.gif\\'" . "eog \"%s\"")
        ("\\.mp4\\'" . "vlc \"%s\"")
        ("\\.mkv" . "vlc \"%s\"")))
#+END_SRC

*** changing todo status
:PROPERTIES:
:ID:       cb44cef0-012a-4124-8b24-faea3c6b2b7c
:END:
This is from the org-mode docs
https://orgmode.org/worg/org-hacks.html#mark-done-when-all-checkboxes-checked.
It will change a todo state when all checkboxes in the list it's containing are toggled.
#+BEGIN_SRC emacs-lisp
;; see http://thread.gmane.org/gmane.emacs.orgmode/42715
(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete))

(defun ndk/checkbox-list-complete ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    ;; all done - do the state change
                    (org-todo 'done)
                  (org-todo 'todo))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (org-todo 'done)
                (org-todo 'todo)))))))
#+END_SRC
This snippet will automatically change a heading to DONE if all subheadings are
DONE as well. Taken from (https://emacs.stackexchange.com/questions/19843/how-to-automatically-adjust-an-org-task-state-with-its-children-checkboxes)
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
** Mathpix
#+BEGIN_SRC emacs-lisp
;; (use-package! mathpix.el
;;   :config
;;   (setq mathpix-app-id "app-id")
;;   (setq mathpix-app-key "app-key")
;;   )
#+END_SRC

** Beancount
Recognise beancount files
#+BEGIN_SRC emacs-lisp
(use-package! beancount
  :config
  ;; (add-to-list 'load-path "~/programs/beancount/editors/emacs")
    ;; (require 'beancount)
  (setq beancount-electric-currency t)
  (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))  ;; Automatically open .beancount files in beancount-mode.
  (add-to-list 'auto-mode-alist '("\\.beancount$" . beancount-mode))
  (defun beancount-bal ()
    "Run bean-report bal."
    (interactive)
    (let ((compilation-read-command nil))
      (beancount--run "bean-report"
                      (file-relative-name buffer-file-name) "bal")))
  (add-hook 'beancount-mode-hook 'outline-minor-mode))
#+END_SRC
** python
LSP
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package! lsp-ui
;;     :requires use-package-hydra
;;     :commands lsp-ui-mode
;;     :config
;;     (setq lsp-ui-sideline-enable t)
;; (setq flycheck-checker-error-threshold 10000)
(setq lsp-ui-flycheck-list-position 'right)
(setq lsp-flycheck-live-reporting t)
;; (setq lsp-ui-peek-enable t)
(setq lsp-ui-peek-list-width 60)
(setq lsp-ui-peek-peek-height 25)
(setq lsp-ui-imenu-enable t)
(setq lsp-ui-doc-use-webkit t)
;; (setq lsp-enable-on-type-formatting nil)
(setq lsp-ui-doc-enable t)
;; (setq lsp-enable-completion-at-point t)
(setq lsp-ui-doc-delay 0.1)
(after! lsp-python-ms (set-lsp-priority! 'mspyls 1))
;; (setq lsp-pyls-server-command '("mspyls"))
;; (setq lsp-ui-sideline-ignore-duplicate t)
;; )
;; (setq read-process-output-max (* 1024 2048)) ;; 1mb
;; (after! lsp-mode
;;   (use-package! lsp-python-ms
;;     :ensure t
;;     :config
;;     (setq lsp-prefer-capf t)
;;     )
;;   )
;; uncomment to have default interpreter as ipython. in Doom : use +python/open-ipython-repl instead
;; Important: using ipython as default python interpreter breaks LSP
;; (when (executable-find "ipython")
;;   (setq python-shell-interpreter "ipython"))
;; (use-package! lsp-python-ms
;;   :ensure t
;;   :hook (python-mode . (lambda ()
;;                           (require 'lsp-python-ms)
;;                           (lsp))))
#+END_SRC
Jupyter
#+BEGIN_SRC emacs-lisp
(after! jupyter
  (set-lookup-handlers! '(jupyter-repl-mode jupyter-org-interaction-mode jupyter-repl-interaction-mode jupyter-repl-persistent-mode)
    :documentation '(jupyter-inspect-at-point :async t)))
;; (set-lookup-handlers! '(jupyter-repl-mode jupyter-org-interaction-mode jupyter-repl-interaction-mode)
;;   :documentation #'jupyter-inspect-at-point
;;   )
#+END_SRC
Use blacken instead of ~SPC c f~ because it works better
#+BEGIN_SRC emacs-lisp
(use-package! blacken)
#+END_SRC
** Version Control
#+BEGIN_SRC emacs-lisp
;;(setq vc-handled-backends nil)
;;(unpin! t)
#+END_SRC
** Backup
autosave
#+BEGIN_SRC emacs-lisp
(auto-save-visited-mode +1) ;;may be redundant with auto-save-default
(setq auto-save-default t
      auto-save-timeout 5
      auto-save-interval 100)
(setq auto-save-file-name-transforms
  `((".*" "~/.emacs-saves/" t)))
#+END_SRC
backup
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs-saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 2
  kept-old-versions 0
  version-control t)
(setq vc-make-backup-files t)

(defun force-backup-of-buffer ()
  ;; Make a special "per session" backup at the first save of each
  ;; emacs session.
  (when (not buffer-backed-up)
    ;; Override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs-saves/per-session")))
          (kept-new-versions 3))
      (backup-buffer)))
  ;; Make a "per save" backup on each save.  The first save results in
  ;; both a per-session and a per-save backup, to keep the numbering
  ;; of per-save backups consistent.
  (let ((buffer-backed-up nil))
    (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp
(add-load-path! "/usr/share/emacs/site-lisp/mu4e")
(use-package! smtpmail)
(use-package! mu4e
  :config
(remove-hook 'mu4e-main-mode-hook 'evil-collection-mu4e-update-main-view)
  (load! "mu4e-config.el")
 )
#+END_SRC
** Snails
#+BEGIN_SRC emacs-lisp
;(use-package!
;    snails)
#+END_SRC

# ** Dired+
# #+BEGIN_SRC emacs-lisp

# (use-package! dired+
#   :config )
# #+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-off-smartparens-mode)
(sp-local-pair
     '(org-mode)
     "<<" ">>"
     :actions '(insert))
#+END_SRC
** Flyspell
    Tecosaur experiences speed issues with flyspell. This is a possible
    solution
#+BEGIN_SRC emacs-lisp
(after! flyspell (require 'flyspell-lazy) (flyspell-lazy-mode 1))
#+END_SRC
** Ispell
Set Dictionary from [[http://app.aspell.net/create]] (en_GB (-ize OED); 80;variants
1;diacritc keep; hacker+roman numerals)
#+NAME:
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "en-custom")
(setq ispell-personal-dictionary "~/.dotfiles/.hunspell_personal" )
#+END_SRC
** Calc
#+BEGIN_SRC emacs-lisp
(setq calc-angle-mode 'rad  ;; radians are rad
      calc-algebraic-mode t ;; allows '2*x instead of 'x<RET>2*
      calc-symbolic-mode t) ;; keeps stuff like √2 irrational for as long as possible
(after! calctex
  (setq calctex-format-latex-header (concat calctex-format-latex-header
                                            "\n\\usepackage{arevmath}")))
(add-hook 'calc-mode-hook #'calctex-mode)
#+END_SRC

** Help stuff
*** Which key popup
make it quicker
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.5)

#+END_SRC
Replacement  of evil prefix
#+BEGIN_SRC emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+END_SRC
*** Lookup
Open lookup in eww instead of firefox
#+BEGIN_SRC emacs-lisp
(setq +lookup-open-url-fn #'eww)
#+END_SRC
** Emacs anywhere
Literally copied from Tecosaur's config

# NB: install with curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash
It's nice to recognise GitHub (so we can use ~GFM~), and other apps which we know
take markdown
#+BEGIN_SRC emacs-lisp
(defun markdown-window-p (window-title)
  "Judges from WINDOW-TITLE whether the current window likes markdown"
  (string-match-p (rx (or "Stack Exchange" "Stack Overflow"
                          "Pull Request" "Issue" "Discord"))
                  window-title))
#+END_SRC
When the window opens, we generally want text so let's use a nice sans serif font,
a position the window below and to the left. Oh, and don't forget about checking
for ~GFM~, otherwise let's just use ~markdown~.
#+BEGIN_SRC emacs-lisp
(define-minor-mode emacs-anywhere-mode
  "To tweak the current buffer for some emacs-anywhere considerations"
  :init-value nil
  :keymap (list
           ;; Finish edit, but be smart in org mode
           (cons (kbd "C-c C-c") (lambda! (if (and (eq major-mode 'org-mode)
                                                   (org-in-src-block-p))
                                              (org-ctrl-c-ctrl-c)
                                            (delete-frame))))
           ;; Abort edit. emacs-anywhere saves the current edit for next time.
           (cons (kbd "C-c C-k") (lambda! (setq ea-on nil)
                                          (delete-frame))))
  (when emacs-anywhere-mode
    ;; line breaking
    (turn-off-auto-fill)
    (visual-line-mode t)
    ;; DEL/C-SPC to clear (first keystroke only)
    (set-transient-map (let ((keymap (make-sparse-keymap)))
                         (define-key keymap (kbd "DEL")   (lambda! (delete-region (point-min) (point-max))))
                         (define-key keymap (kbd "C-SPC") (lambda! (delete-region (point-min) (point-max))))
                         keymap))
    ;; disable tabs
    (when (bound-and-true-p centaur-tabs-mode)
      (centaur-tabs-local-mode t))))

(defun ea-popup-handler (app-name window-title x y w h)
  (interactive)
  (set-frame-size (selected-frame) 80 12)
  ;; position the frame near the mouse
  (let* ((mousepos (split-string (shell-command-to-string "xdotool getmouselocation | sed -E \"s/ screen:0 window:[^ ]*|x:|y://g\"")))
         (mouse-x (- (string-to-number (nth 0 mousepos)) 100))
         (mouse-y (- (string-to-number (nth 1 mousepos)) 50)))
    (set-frame-position (selected-frame) mouse-x mouse-y))

  (set-frame-name (concat "Quick Edit ∷ " ea-app-name " — "
                          (truncate-string-to-width
                           (string-trim
                            (string-trim-right window-title
                                               (format "-[A-Za-z0-9 ]*%s" ea-app-name))
                            "[\s-]+" "[\s-]+")
                           45 nil nil "…")))
  (message "window-title: %s" window-title)

  ;; set major mode
  (cond
   ((markdown-window-p window-title) (gfm-mode))
   (t (org-mode)) ; default major mode
   )

  (when-let ((selection (gui-get-selection 'PRIMARY)))
    (insert selection)
    ;; I'll be honest with myself, I /need/ spellcheck
    (flyspell-buffer))

  (evil-insert-state) ; start in insert
  (emacs-anywhere-mode 1))

(add-hook 'ea-popup-hook 'ea-popup-handler)
#+END_SRC
** Bibtex
Add a property to bibtex note including the file name so org noter can be used
to take notes while viewing the pdf.
#+BEGIN_SRC emacs-lisp
;; (setq bibtex-completion-notes-template-multiple-files "${author-or-editor} - ${year}: ${title}\n#+ROAM_KEY: cite:${=key=}\n\n- keywords :: ${keywords}\n\n* Notes on ${title}\n:PROPERTIES:\n:NOTER_DOCUMENT: ${file}\n:END:\n\n")
(setq bibtex-completion-notes-template-multiple-files
(concat
  "${author-abbrev}: ${title}\n"
  "#+ROAM_KEY: cite:${=key=}\n\n"
  "- tags :: \n"
  "- keywords :: ${keywords}\n\n"
  "* TODO Notes\n"
  ":PROPERTIES:\n"
  ":Custom_ID: ${=key=}\n"
  ":NOTER_DOCUMENT: ${file}\n"
  ":AUTHOR: ${author-abbrev}\n"
  ":JOURNAL: ${journaltitle}\n"
  ":DATE: ${date}\n"
  ":YEAR: ${year}\n"
  ":DOI: ${doi}\n"
  ":URL: ${url}\n"
  ":END:\n\n"
  ))
#+END_SRC
** eww
Set popup to open in right window
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*eww*" :side 'right :size 0.5)

#+END_SRC
** ranger
Do not preview files literally but render images etc
#+BEGIN_SRC emacs-lisp
(setq ranger-show-literal nil)
#+END_SRC
